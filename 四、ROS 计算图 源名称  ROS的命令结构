 
     1、 全局名称
         节点、话题、服务和参数统称为计算图源,而每个计算图源由一个叫
         计算图 源名称( graph resource name)的短字符串标识。
      
	/teleop_turtle
	/turtlesim
	/turtle1/cmd_vel
	/turtle1/pose
	/run_id
	/count_and_log/set_logger_level

	这些计算图源名称都属于全局名称,之所以叫做全局名称因为它们在任何地方(
	包括代码、命令行工具、图形界面工具等的任何地方)都可以使用。
	以下是一个全局名称的几个组成部分:

	   1) 前斜杠“/”表明这个名称为全局名称。
	   2) 由斜杠分开的一系列命名空间(namespace),每个斜杠代表一级命名空间。你可能已经猜到了,命名空间用于将相关的
	      计算图源归类在一起。上述名称例子包含了两个显式的命名 空间,分别为 turtle1 和 count_and_log。ROS 允许多层次的命
	      名空间,所以下面这个包含了 11 个嵌套名称空间的名称也是 有效的全局名称,虽然看起来不太可能有人这么用。
	     /a/b/c/d/e/f/g/h/i/j/k/l
	     如果没有显式提及所属的命名空间,包括上述三个例子在内,则对应的计算图源名称是归在全局命名空间中的。
	   3)描述资源本身的基本名称(base name)。
	     上述例子中的基本名 称 分 别 为 :
	     teleop_turle 、 cmd_vel 、 pose 、 run_id 和 set_logger_level。   
	     我们必须意识到,如果在任何地方都使用全局名称,除了可能使人更容易追踪变量外,并不能从使用复杂的命名空间中受益
	     多少。这种命名系统的真正优势来自于相对名称和私有名称。
     
    2、 相对名称   relative name

	我们刚刚已经看到,使用全局名称时,为了指明一个计算图源,
	需要完整列出其所属的命名空间,尤其是有时候命名空间层
	次比较多,这可能会让你抓狂。这时,一个主要替代方案是让 ROS 
	为计算图源提供一个默认的命名空间,具有此特征的名称叫做相
	对计算图源名称(ralative graph resource name),
	或简称为相对 名称(relative name)。
	相对名称的典型特征是它缺少全局名称带有的前斜杠“/”。
	下面是一些相对名称的例子:
	teleop_turtle
	turtlesim
	cmd_vel
	turtle1/pose
	run_id
	count_and_log/set_logger_level

    3、 解析相对名称
	将相对名称转化为全局名称的过程相当简单。
	ROS 将当前默认的命名空间的名称加在相对名称的前面,
	从而将相对名解析为全局名称。比如,如果我们在默认命名空间为/turtle1
	的地方使用相对名称 cmd_vel,那么 ROS 通过下面的组合方法得 到全局名称:
	
	/turtle1   +    cmd_vel    ⇒  /turtle1/cmd_vel
	默认命名空间      相对名称           全局名称

	相对名称也可以以一系列的命名空间开始,这些命名空间被 看作是默认命名空间中的嵌套空间。
	举个例子,如果我们在默认
	命名空间为/a/b/c/d/e/f 的地方使用相对空间 g/h/i/j/k,
	ROS 将会将其进行下面的组合:
	/a/b/c/d/e/f   +    g/h/i/j/k   ⇒  /a/b/c/d/e/f/g/h/i/j/k/l
	默认命名空间           相对名称          全局名称 

	然后,得到的全局名称就可以用于确定一个特定的计算图源,就 像前面介绍全局名称的使用时一样。
  
    4、 设置默认命名空间  default-namespace
    
	默认的命名空间是单独地为每个节点设置的,而不是在系统范围进行。如果你不采取下面介绍的步骤来设置默
	认命名空间,那么 ROS 将会如你所期望的那样,使用全局命名空间(/)作为此节点的默认命名空间。

	为节点选择一个不同的默认命 名空间的最好也是最常用的方法是在启动文件中使用命名空间 (ns)属性

	1） 大部分 ROS 程序,包括调用 ros::init 的所有 C++程序,接 受叫做__ns 的命令行参数,此参数将为程序指定一个默认命 名空间。
	__ns:=default-namespace
	2) 还可以利用环境变量为在 shell 内执行的 ROS 程序设置默 认命名空间。
	Export ROS_NAMESPACE=default-namespace
	请注意,只有当没有其他由 __ns 参数指定的默认命名空间时,这个环境变量才有效。


    5、  私有名称（private name） 类似 ~ 代表home目录一样
	私有名称,以一个波浪字符(~)开始,是第三类也是最后一 类计算图源名称。
	和相对名称一样,私有名称并不能完全确定它
	们自身所在的命名空间,而是需要 ROS 客户端库将这个名称解析 为一个全局名称。
	与相对名称的主要差别在于,私有名称不是用 当前默认命名空间,而是用的它们  节点名称  作为命名空间。
	例如,有一个节点,它的全局名称是 /sim1/pubvel,ROS 将其私有名称 ∼max_vel  换至如下全局名称:

	/sim1/pubvel  +   ∼max_vel    ⇒   /sim1/pubvel/max_vel
	节点名称           私有名称            全局名称

	这种命名方式基于如下事实,每个节点内部都有这样一些资源, 这些资源只与本节点有关,而不会与其他节点打交道,
	这些资源就可以使用私有名称。私有名称常常用于参数——roslaunch 有专 门的功能用于设置私有名称可以访问的的参数,

	将话题命名为私有名 称是个常见错误,因为如果我们想要保持节点的松耦合性,
	那么 没有一个话题是被任意某个特定节点所“拥有的”。

	私有名称的关键字“private”仅仅表示其他节点不会使用它 们所在的命名空间,也就是仅在命名空间层面上有意义。
	对于其他节点来讲,只要知道私有名称解析后的全局名称, 都可以通过其全局名称访问这些计算图源。

	这和 C++等其 他类似编程语言中的关键字“private”是不同的,在这些编 程语言中,
	系统中的其他部分是不能访问某个类的私有成员变量的。
      
    6、 匿名名称(Anonymous names)   可以同时启动多个 同样的拥有匿名名称的节点

	除了以上三种基本的命名类型,ROS 还提供了另一种被称为 匿名名称的命名机制,一般用于为节点命名
	(译者注:这里的匿 名并不是指没有名字,而是指非用户指定而又没有语义信息的名 ).
	匿名名称的目的是使节点的命名更容易遵守唯一性的规则。
	其思路是,当节点调用 ros::init 方法时可以请求一个自动分配的 唯一名称。

	为 了 请 求 一 个 匿 名 名 称 , 节 点 需 要 将
	ros::init_options::Anonymous-Name 作 为 第 四 个 参 数 传 递 给
	ros::init 方法:         节点名字
	ros::init(argc, argv, base_name, ros::init_options::AnonymousName);

	虽然 ROS 追加了什么特定额外文本对于用户来讲并不是那 么重要,但作者觉得有必要指出 ros::init 使用处理器时间
	(wall clock time)生成匿名名称。
```c   
// This program starts with an anonymous name, which
// allows multiple copies to execute at the same time ,
// without needing to manually create distinct names
// for each of them.
#include <ros/ros.h>
int main ( int argc, char **argv ) {
ros::init ( argc, argv, "anon",
ros::init_options::AnonymousName );
ros::NodeHandle nh ;
ros::Rate rate (1) ;
while (ros::ok( )) {
  ROS_INFO_STREAM("This message is from :"
     << ros::this_node::getName ( ));
    rate.sleep( );
   }
 }
```

    这个程序的行为本身并没有什么特别。但是,正因为它请求了一个匿名名称,所以我们可以同时运行任意多的以上程序的副
    本。这很容易理解,每个程序开始运行时,它就会得到一个具备唯一性的名字。
    
 
