
> a 从命令行查看和调用服务

	rosservice call service-name request-content
	rosservice call clear             //该服务不需要输入参数

	rosservice call /spawn 2 2 0.2 my_turtle  
	//需要参数的服务   x y 朝向角度(弧度制）  名字    （命名空间）

	rosservice call /spawn  3 3 0 Mikey2     位置(3,3） 朝向0
	rosservice call /spawn 5 5 1.57 Mikey3   位置(5,5） 朝向90度
	rosservice call /spawn 5 5 3.14 Mikey4   位置(7,7） 朝向180度
	rosservice call /spawn 5 5 6.28 Mikey4   位置(11,11） 朝向360度    最上角

	响应应该是: name: Mikey2...   #命名空间


	 这些新的海龟有它自己的资源集,
	 包括 cmd_vel、pose、color_sensor 话题、
	 set_pen 服务、
	 teleport_absolute 服务、
	 teleport_relative 服务。
	 在本例中,这些新的资源在一个名为 Mikey 的命名空间中。
	 这些资源在常用的 turtle1 命名空间之外,
	 也符合其他节点想要独立控制这些海龟的需求。
	 这一点很好地阐明了命名空间可以有效地阻止命名冲突。

 
       查看需要参数的服务 的参数
       rosservice type spawn | rossrv show


> b 程序调用服务

	  服务  之 client 客户端 编写
	  1) 声明请求 和 响应的类型   
	     #include <package_name/type_name.h> // 包名/服务类型名

	     就像消息类型一样(参照 3.3.1 节),每一种服务数据类型都对应一个我们必须包含的相关 C++头文件
	     #include <turtlesim/Spawn.h>
	     来包含名为 turtlesim::Spawn 类的定义,
	     这个类定义了我们想要调用的服务的数据类型,包括全部请求 和 响应字段。

	  2)创建客户端对象
	      在按照节点要求初始化后(通过调用 ros::init 和创建一个 NodeHandle 对象),
	      我们的程序必须创建一个类型为
	      ros::ServiceClient 的对象,实际上是这个对象完成服务调用。
	      按照如下声明一个 ros::ServiceClient 对象:

	      ros::ServiceClient client = node_handle.serviceClient<service_type>(service_name);

	      这条指令有三个重要部分。
		 a）  node_handle  是常用的 ros::NodeHandle 对象,这里我们将调用它的 serviceClient 方法。
		 b）  service_type 是我们在上面头文件中定义的服务对象的数据类型,
		                   在本例中,类型为 turtlesim::Spawn。
		 c）  service_name 是一个字符串, 说明了我们想要调用的服务名称。
		      再次强调, 这应当是一个相对名称, 虽然也可以声明为全局名称。
		      例子中使用的是相对名称“spawn”。

	      一般来讲,创建这个对象的过程并不占用多少计算量,
	      因为除了存放之后想调用的服务详情外,并不用做太多工作。
	      值得注意的是,与创建类似的 ros::Publisher 对象相比,
	      创建 ros::ServiceClient 对象不需要队列大小。
	      之所以会造成这种差异,是因为服务调用 直到响应抵达后 才会返回。
	      由于客户端要等待服务调用完成,
	      因此没有必要维持一个 发送服务调用 的 队列。

	   3) 创建请求和响应对象
	      我们上面包含的头文件中分别定义了请求和响应的类, 
	      命名为 Request 和 Response。
	      这些类必须通过功能包名称和服务类型来引用,
      
      如下所示:
      
```c
// 调用 创建新的 小乌龟的 服务=============
#include <ros/ros.h>
#include <turtlesim/Spawn.h>
int main( int argc , char ** argv )
{
    ros::init ( argc , argv , "spawn_turtle") ; // ros初始化
    ros::NodeHandle nh ;// 节点句柄
    // 创建服务客户端(调用服务)
    ros::ServiceClient spawnClient = nh.serviceClient <turtlesim::Spawn>("spawn") ;
    //Rros:: ServiceClient client =node_handle.advertise<service_type>(service_name, true);
    // 可以创建一个持续的服务客户端 不推荐
    
    // Create the request and response objects.
    turtlesim::Spawn::Request req ;     // 请求
    turtlesim::Spawn::Response resp ;   /// 响应
    
    // Fill in the request data members. 请求需要传递的一些参数
    req.x = 2; // 生成的位置
    req.y = 3;
    req.theta = M_PI/2; // 角度朝向
    req.name = "my_spa_turtle" ;// 名字
    
    // 调用服务，等待并获取响应
    bool success = spawnClient.call( req , resp ) ;
    //调用服务 一旦拥有了一个 ServiceClient、一个完整的 Request 以及 Response,我们就可以调用服务了
    //这个方法实际上完成了定位服务器节点、传输请求数据、等待响应和存储响应数据等一系列工作。
    //这个调用方法返回一个布尔值来表明服务调用是否成功完成。
    //若调用失败通常意味着另一只有着被请求名称的海龟已经存在。

    // Check for success and use the response .
    if ( success ) 
    {
        ROS_INFO_STREAM("Spawned a turtle named: "
        << resp.name) ;
     } 
    else 
    {
        ROS_ERROR_STREAM("Failed  to  spawn.") ;
        //当服务调用失败的时候,可以调用 ROS_ERROR_STREAM 输出错误信息。
     }  
}
```

	在默认情况下,查找和连接服务器节点的过程是在调用方法内部发生的。
	这个连接 仅在 此次服务调用期间有效,在调用返回后将被关闭。
	ROS 也支持持续服务客户端的概念, ros::ServiceClient 
	构造函数建立与服务器节点的连接,然后可以被这个客户端对象的所有后续调用重用。
	
	通过传递 true 值给构造函数的第二个参数,
	可以创建一个持续的服务客户端(在前面的例子中使用了缺省值 false):
	
	Ros:: ServiceClient client =node_handle.advertise<service_type>(service_name, true);
	
	在线文档中对持续客户端的应用是轻微抵制的 ,因为这么做并不能提升多少系统性能,作者的非正式实验表明,
	性能只提升了约 10%,然而其代价是导致系统在重启和修改服务器节点时的鲁棒性变差。

	！！！！！！！！！！！！！！！！！！！！！
	声明依赖
	编译服务cpp需要 修改 CMakeLists.txt 和清单文件 packag.xml
	为 了 编 译 例 子 中 的 程 序 , 我 们 必 须 保 证
	
	CMakeLists.txt 中的 find_package 行涉及了 turtlesim 功能包,如下所示:
	find_package(catkin REQUIRED COMPONENTS roscpp turtlesim)
	
	在 package.xml 中,我们应当确保 
	build_depend 和 
	run_depend
	元素中存在相同名称的包,即:
	<build_depend>turtlesim</build_depend>
	<run_depend>turtlesim</run_depend>
	完成这些修改后,多次使用的 catkin_make 命令应该就能完
	成程序的编译了。


> c 程序创建服务器

	示例提供名为 toggle_forward 服务,同时具备控制 turtlesim 机器人运动的功能,
	每次服务调用时将在前进和转向之间转换。
	可以看到,服务器端的代码 与 订阅话题的代码非常相似。
	除了名称上的区别,
	我们必须创建一个 ros::ServiceServer 来代替ros::Subscriber,
	
	唯一的区别在于服务器端可以通过一个 响应对象 和一个表明 成功与否 的布尔变量给客户端回传数据。

	编写服务的回调函数 如同订阅一样,节点提供的每一个服务必须关联一个回调函数,服务的回调函数原型如下:
	bool function_name(
	package_name::service_type::Request &req), //请求
	package_name::service_type::Response &resp)// 响应
	) 
	{
	...
	}
	节点每次接收到一个服务请求,ROS 就执行一次回调函数。
	参数 Request 中包含了来自于客户端的数据。
	回调函数的工作是给 Response 对象的数据成员赋值。 
	Request 和 Response 数据类型与上面在客户端使用的一致,
	因此需要相同的头文件和相同的包依赖关系来编译。
	回调函数返回 true 表明成功,返回 false 则表示失败。

	在该例中, Request 和 Response 都使用了 std_srvs/Empty (空字符串)
	作为其数据类型,因此无需针对这两个对象做任何数据处理。
	回调函数的唯一工作是切换一个称为 forward 的全局布尔变量,用于管理在主函数中发布的速度消息。
```c
 // 提供一个 切换旋转与前进的 服务=====================
  #include <ros/ros.h>
  #include <std_srvs/Empty.h>      // 服务数据类型           
  #include <geometry_msgs/Twist.h> // 发布小乌龟速度消息类型  
 
  bool forward = true ;
  bool toggleForward (
                      std_srvs::Empty::Request &req ,
                      std_srvs::Empty::Response &resp ) {
     forward = !forward ; //改变 前进 旋转 标志 在主循环中判断
     ROS_INFO_STREAM("Now sending " << ( forward ?"forward" : " rotate ") << "  commands.") ;
     return true ;
   }
  
   int main( int argc , char** argv ) 
   {
   ros::init ( argc , argv , "change_forward_rotate") ;// ros初始化
   ros::NodeHandle nh ;// 节点句柄
  
   // 服务客户端，被调用者
   ros::ServiceServer server = nh.advertiseService ("change_forward_rotate" , &toggleForward ) ;
  
   // Publish commands, using the latest value for forward ,
   // until the node shuts down.
   // 话题发布速度命令
   ros::Publisher pub = nh.advertise <geometry_msgs::Twist>("turtle1/cmd_vel" , 1000) ;
   ros::Rate rate (2) ;
   while ( ros::ok () ) 
   {
	   geometry_msgs::Twist msg ;
	   msg.linear.x = forward ? 1.0 : 0.0 ;//前进
	   msg.angular.z = forward ? 0.0 : 1.0 ;//旋转
	   pub.publish (msg) ;
	   ros::spinOnce () ;
	   rate.sleep () ;
    }
 }
```

    rosrun agitros changeForwardRotate    运行节点
    rosservice list  查看是否出现相应的服务
    rosservice call /change_forward_rotate   调用相应的服务


	由于在私有名称的解析上存在一些理解上的歧义,
	ros::NodeHandle::advertiseService
	拒绝接受私有名称(即那些以~开始的名称)。
	这种约束的解决方案是基于以下事实—一种目前我们还没用使用过的节点创建方法,
	
	即可以利用节点自身的缺省命名空间来创建 ros::NodeHandle 对象。
	举个例子,我们可以按照以下方式来创建
	ros::NodeHandle:
	ros::NodeHandle nhPrivate("~");
	
	这种情况下,发送给这个节点句柄的任意局部名称的缺省命名空间同节点名称一致。
	
	特别指出的是,这意味着如果我们用这个句柄和相对名称来发布一个服务,效果将与使用私有名称相同。
	
	例如在一个名为/foo/bar 的节点,像如下广播一个名为/foo/bar/baz 的服务:
	
	ros::ServiceServer server =nhPrivate.advertiseService("baz", Callback);
	
	如果句柄愿意接受私有名称的话,这段代码的效果与使用通常的 NodeHandle 广播名为~baz 的服务效果相同。


	复制服务:
	roscp [package_name] [file_to_copy_path] [copy_path]
	roscp rospy_tutorials Add

